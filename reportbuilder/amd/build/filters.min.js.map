{"version":3,"sources":["../src/filters.js"],"names":["init","reportId","contextId","reportElement","document","querySelector","reportSelectors","forSystemReport","filterFormContainer","regions","filtersForm","filterForm","DynamicForm","addEventListener","events","FORM_SUBMITTED","event","preventDefault","reportEvents","tableReload","then","addToast","catch","Notification","exception","NOSUBMIT_BUTTON_PRESSED","pendingPromise","Pending","reportid","parameters","dataset","parameter","html","js","Templates","replaceNodeContents","resolve","style","overflowX"],"mappings":"msBAyBA,OACA,OAEA,OAEA,OACA,OACA,O,ylBAUO,GAAMA,CAAAA,CAAI,CAAG,SAACC,CAAD,CAAWC,CAAX,CAAyB,IACnCC,CAAAA,CAAa,CAAGC,QAAQ,CAACC,aAAT,CAAuBC,CAAe,CAACC,eAAhB,CAAgCN,CAAhC,CAAvB,CADmB,CAEnCO,CAAmB,CAAGL,CAAa,CAACE,aAAd,CAA4BC,CAAe,CAACG,OAAhB,CAAwBC,WAApD,CAFa,CAGnCC,CAAU,CAAG,GAAIC,UAAJ,CAAgBJ,CAAhB,CAAqC,oCAArC,CAHsB,CAMzCG,CAAU,CAACE,gBAAX,CAA4BF,CAAU,CAACG,MAAX,CAAkBC,cAA9C,CAA8D,SAAAC,CAAK,CAAI,CACnEA,CAAK,CAACC,cAAN,GAGA,oBAAcC,CAAY,CAACC,WAA3B,CAAwC,EAAxC,CAA4ChB,CAA5C,EAEA,iBAAU,gBAAV,CAA4B,oBAA5B,EACKiB,IADL,CACUC,KADV,EAEKC,KAFL,CAEWC,UAAaC,SAFxB,CAGH,CATD,EAYAb,CAAU,CAACE,gBAAX,CAA4BF,CAAU,CAACG,MAAX,CAAkBW,uBAA9C,CAAuE,SAAAT,CAAK,CAAI,CAC5EA,CAAK,CAACC,cAAN,GAEA,GAAMS,CAAAA,CAAc,CAAG,GAAIC,UAAJ,CAAY,kCAAZ,CAAvB,CAEA,YAAa1B,CAAb,EACKmB,IADL,CACU,iBAAM,iBAAU,cAAV,CAA0B,oBAA1B,CAAN,CADV,EAEKA,IAFL,CAEUC,KAFV,EAGKD,IAHL,CAGU,iBAAM,mBAAa,oBAAb,CAAmC,cAAnC,CAAmDlB,CAAnD,CAA8D,CACtE0B,QAAQ,CAAE3B,CAD4D,CAEtE4B,UAAU,CAAE1B,CAAa,CAAC2B,OAAd,CAAsBC,SAFoC,CAA9D,CAAN,CAHV,EAOKX,IAPL,CAOU,SAACY,CAAD,CAAOC,CAAP,CAAc,CAChBC,UAAUC,mBAAV,CAA8B3B,CAA9B,CAAmDwB,CAAnD,CAAyDC,CAAzD,EACA,oBAAcf,CAAY,CAACC,WAA3B,CAAwC,EAAxC,CAA4ChB,CAA5C,EAEA,MAAOuB,CAAAA,CAAc,CAACU,OAAf,EACV,CAZL,EAaKd,KAbL,CAaWC,UAAaC,SAbxB,CAcH,CAnBD,EAsBApB,QAAQ,CAACC,aAAT,CAAuB,cAAvB,EAAuCgC,KAAvC,CAA6CC,SAA7C,CAAyD,SAC5D,CAzCM,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Report builder filter management\n *\n * @module      core_reportbuilder/filters\n * @copyright   2021 Paul Holden <paulh@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport {loadFragment} from 'core/fragment';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {get_string as getString} from 'core/str';\nimport Templates from 'core/templates';\nimport {add as addToast} from 'core/toast';\nimport DynamicForm from 'core_form/dynamicform';\nimport * as reportEvents from 'core_reportbuilder/local/events';\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\nimport {reset as resetFilters} from 'core_reportbuilder/local/repository/filters';\n\n/**\n * Initialise module for given report\n *\n * @method\n * @param {Number} reportId\n * @param {Number} contextId\n */\nexport const init = (reportId, contextId) => {\n    const reportElement = document.querySelector(reportSelectors.forSystemReport(reportId));\n    const filterFormContainer = reportElement.querySelector(reportSelectors.regions.filtersForm);\n    const filterForm = new DynamicForm(filterFormContainer, '\\\\core_reportbuilder\\\\form\\\\filter');\n\n    // Submit report filters.\n    filterForm.addEventListener(filterForm.events.FORM_SUBMITTED, event => {\n        event.preventDefault();\n\n        // After the form has been submitted, we should trigger report table reload.\n        dispatchEvent(reportEvents.tableReload, {}, reportElement);\n\n        getString('filtersapplied', 'core_reportbuilder')\n            .then(addToast)\n            .catch(Notification.exception);\n    });\n\n    // Reset report filters.\n    filterForm.addEventListener(filterForm.events.NOSUBMIT_BUTTON_PRESSED, event => {\n        event.preventDefault();\n\n        const pendingPromise = new Pending('core_reportbuilder/filters:reset');\n\n        resetFilters(reportId)\n            .then(() => getString('filtersreset', 'core_reportbuilder'))\n            .then(addToast)\n            .then(() => loadFragment('core_reportbuilder', 'filters_form', contextId, {\n                reportid: reportId,\n                parameters: reportElement.dataset.parameter,\n            }))\n            .then((html, js) => {\n                Templates.replaceNodeContents(filterFormContainer, html, js);\n                dispatchEvent(reportEvents.tableReload, {}, reportElement);\n\n                return pendingPromise.resolve();\n            })\n            .catch(Notification.exception);\n    });\n\n    // Modify \"region-main\" overflow for big filter forms.\n    document.querySelector('#region-main').style.overflowX = \"visible\";\n};\n"],"file":"filters.min.js"}